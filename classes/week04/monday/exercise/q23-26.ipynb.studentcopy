{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# ðŸ§ª Lab 1 Reinforcement Exercises\n",
        "These exercises build on Lab 1 concepts: input handling, string manipulation, control flow, and basic algorithms.\n",
        "Each problem includes a full description and a code cell for your solution."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## ðŸŸ© Exercise 25: Vowel and Consonant Counter\n",
        "**Problem:** Ask the user for a block of text. Count and display the number of vowels and consonants. Ignore non-letter characters.\n",
        "\n",
        "**Input:**\n",
        "- A string of text\n",
        "\n",
        "**Output:**\n",
        "- Number of vowels\n",
        "- Number of consonants"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def clear_screen():\n",
        "    print(\"\\n\" * 50)\n",
        "\n",
        "# --- Task 25 ---\n",
        "text = input(\"Enter a block of text: \").lower()\n",
        "\n",
        "vowels = \"aeiou\"\n",
        "vowel_count = 0\n",
        "consonant_count = 0\n",
        "\n",
        "for char in text:\n",
        "    if char.isalpha():  # only letters\n",
        "        if char in vowels:\n",
        "            vowel_count += 1\n",
        "        else:\n",
        "            consonant_count += 1\n",
        "\n",
        "print(f\"Number of vowels: {vowel_count}\")\n",
        "print(f\"Number of consonants: {consonant_count}\")\n",
        "\n",
        "input(\"\\nPress Enter to continue...\")\n",
        "clear_screen()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## ðŸŸ© Exercise 26: Longest Word Finder\n",
        "**Problem:** Ask the user for a sentence. Identify and print the longest word. Strip punctuation from words before comparing lengths.\n",
        "\n",
        "**Input:**\n",
        "- A sentence with words and punctuation\n",
        "\n",
        "**Output:**\n",
        "- The longest word (punctuation removed)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\"\"\"\n",
        "# Exercise 26: Longest Word Finder\n",
        "\"\"\"\n",
        "\n",
        "import string\n",
        "\n",
        "def clear_screen():\n",
        "    print(\"\\n\" * 50)\n",
        "\n",
        "# --- Task 26 ---\n",
        "sentence = input(\"Enter a sentence: \")\n",
        "\n",
        "# Remove punctuation\n",
        "translator = str.maketrans(\"\", \"\", string.punctuation)\n",
        "words = [word.translate(translator) for word in sentence.split()]\n",
        "\n",
        "# Find the longest word\n",
        "longest_word = \"\"\n",
        "for word in words:\n",
        "    if len(word) > len(longest_word):\n",
        "        longest_word = word\n",
        "\n",
        "print(f\"The longest word is: {longest_word}\")\n",
        "\n",
        "input(\"\\nPress Enter to continue...\")\n",
        "clear_screen()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## ðŸŸ© Exercise 27: Sentence Type Breakdown\n",
        "**Problem:** Ask the user for a block of text. Count how many sentences end with `.`, `?`, and `!`. Display a breakdown of sentence types.\n",
        "\n",
        "**Input:**\n",
        "- A block of text\n",
        "\n",
        "**Output:**\n",
        "- Total number of sentences\n",
        "- Number of declarative (.), interrogative (?), and exclamatory (!) sentences"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\"\"\"\n",
        "# Exercise 27: Sentence Type Breakdown\n",
        "\"\"\"\n",
        "\n",
        "def clear_screen():\n",
        "    print(\"\\n\" * 50)\n",
        "\n",
        "# --- Task 27 ---\n",
        "text = input(\"Enter a block of text: \")\n",
        "\n",
        "declarative = text.count(\".\")\n",
        "interrogative = text.count(\"?\")\n",
        "exclamatory = text.count(\"!\")\n",
        "\n",
        "total_sentences = declarative + interrogative + exclamatory\n",
        "\n",
        "print(f\"Total sentences: {total_sentences}\")\n",
        "print(f\"Declarative ('.'): {declarative}\")\n",
        "print(f\"Interrogative ('?'): {interrogative}\")\n",
        "print(f\"Exclamatory ('!'): {exclamatory}\")\n",
        "\n",
        "input(\"\\nPress Enter to continue...\")\n",
        "clear_screen()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Exercise 28: Caesar Cipher Key Finder\n",
        "\n",
        "Objective: Write a program to decode a message when the key is unknown, using reasoning instead of trying all shifts.\n",
        "\n",
        "Scenario:\n",
        "-    You receive an encrypted message:\n",
        "-    Encrypted message: 'KHOOR ZRUOG'\n",
        "-    Hint: The first word is 'HELLO'\n",
        "  \n",
        "  \n",
        "Tasks:\n",
        "-    Identify the shift key\n",
        "-    Use the hint ('HELLO') to determine the number of positions the letters were shifted.\n",
        "-    Think: 'H' ? 'K', what shift was applied?\n",
        "-    Decode the full message\n",
        "-    Write a function decode_caesar(message, key) that takes the encrypted message and the key you found.\n",
        "-    Print the decrypted message."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\"\"\"\n",
        "# Exercise 28: Caesar Cipher Key Finder\n",
        "\"\"\"\n",
        "\n",
        "def clear_screen():\n",
        "    print(\"\\n\" * 50)\n",
        "\n",
        "# --- Task 28 ---\n",
        "\n",
        "encrypted = \"KHOOR ZRUOG\"\n",
        "hint = \"HELLO\"\n",
        "\n",
        "# Step 1: Find the shift\n",
        "# Compare first letters: 'H' -> 'K'\n",
        "shift = (ord(encrypted[0]) - ord(hint[0])) % 26\n",
        "print(f\"Identified shift key: {shift}\")\n",
        "\n",
        "# Step 2: Define decoding function\n",
        "def decode_caesar(message, key):\n",
        "    result = \"\"\n",
        "    for char in message:\n",
        "        if char.isalpha():\n",
        "            # Uppercase handling\n",
        "            base = ord('A') if char.isupper() else ord('a')\n",
        "            new_char = chr((ord(char) - base - key) % 26 + base)\n",
        "            result += new_char\n",
        "        else:\n",
        "            result += char\n",
        "    return result\n",
        "\n",
        "# Step 3: Decode the full message\n",
        "decoded = decode_caesar(encrypted, shift)\n",
        "print(f\"Decrypted message: {decoded}\")\n",
        "\n",
        "input(\"\\nPress Enter to continue...\")\n",
        "clear_screen()\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.18"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
